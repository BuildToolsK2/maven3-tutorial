# -*- mode: org; coding: utf-8-unix -*-

#+SETUPFILE: ./conf.org



** アーティファクト

mavenでは、あるmavenモジュールから作り出される成果物（典型的にはjarやwarファイル）を
アーティファクト(artifact ≒ 成果物)と呼びます。

** 推移的依存関係

あるアーティファクトAが別のアーティファクトBに依存しているとします。
自分のモジュールにアーティファクトAを<dependecy>に加えた場合、
アーティファクトBも依存関係に含まれます。
これを推移的依存関係といいます。

*** JUnitの例

[[file:resources/junit_deps.png]]

JUnitはtestスコープで使用しているので、
hamcrestもtestスコープとなる。

*** Logbackの例

[[file:resources/logback_deps.png]]
 
** <dependency>の要素

<dependecy>には依存するアーティファクトの情報を記載します。

| 要素       | 説明                                           | 例                  |
|------------+------------------------------------------------+---------------------|
| groupId    | グループ一意に特定するID                       | org.springframework |
| artifactId | グループ内で成果物を一意に特定するID           | spring-webmvc       |
| version    | バージョン                                     | 4.2.4.RELEASE       |
| scope      | その依存ライブラリをどの場面で使用するか([[./scope.html][後述]]) | compile             |


** versionの考え方

PJ内で、ライブラリを共有する場合を考えてみます。

*** バージョン管理システムで共有する場合

svnを使用しているとします。


#+BEGIN_SRC plantuml :file resources/lib-svn.png :cmdline -charset UTF-8
hide footbox

actor  "ライブラリ開発者" as lib_dev
participant "ソースコードリポジトリ\n(svn)" as svn
actor  "アプリ開発者" as app_dev

lib_dev -> svn : インタフェース変更をコミット
app_dev -> svn : svn update
app_dev <-- svn : インタフェースが変更されたソースコード\n（コンパイルエラー発生）

#+END_SRC

#+RESULTS:
[[file:resources/lib-svn.png]]


アプリ開発チームが、朝一番でsvn updateすると、PJライブラリに大幅に変更が入っていました。
アプリ開発チームは、新機能作成の途中で、変更されたライブラリの取り込みを余儀なくされました。

*** インハウスリポジトリで共有する場合


#+BEGIN_SRC plantuml :file resources/lib-mvn.png :cmdline -charset UTF-8
hide footbox

actor  "ライブラリ開発者" as lib_dev
participant "ソースコードリポジトリ\n(svn)" as svn
participant "インハウスリポジトリ" as inhouse
actor  "アプリ開発者" as app_dev

lib_dev -> svn : インタフェース変更をコミット\n(v1.0.0 -> v1.0.1)
lib_dev -> inhouse : mvn deploy pj-lib-1.0.1.jar
lib_dev <-- inhouse

app_dev -> svn : svn update app\n(担当モジュールのみアップデート)
app_dev <-- svn : 担当モジュールの\n最新ソース取得
app_dev -> app_dev : 作成中の機能が\n完成するまで作業
app_dev -> svn : svn commit\n(完成したコードをコミット)
app_dev <-- svn

app_dev -> app_dev : pj-libの\nバージョンアップ\n(v1.0.0 -> 1.0.1)
app_dev -> inhouse : GET pj-lib-1.0.1.jar
app_dev <-- inhouse : インタフェースが変更された\nライブラリ\n(v1.0.1)

app_dev -> app_dev : コンパイルエラーを修正


#+END_SRC

#+RESULTS:
[[file:resources/lib-mvn.png]]

*** 注意点

SNAPSHOTバージョンを使用すると、最新のライブラリがダウンロードされるので、
「[[バージョン管理システムで共有する場合]]」と同じ事象が発生します。
明示的にバージョン番号を変更することで、任意のタイミングでライブラリを
リリース／取り込みできます。
