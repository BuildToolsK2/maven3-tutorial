# -*- mode: org; coding: utf-8-unix -*-

#+SETUPFILE: ./conf.org

** この章のねらい
- とにかくMavenを動かして慣れよう！

** TODO archetypeからプロジェクト作成してみよう

シンプルなpom.xmlから学習するため、
デフォルトのアーキタイプからプロジェクトを生成します。


#+begin_src sh
cd example
mvn archetype:generate
#+end_src

アーキタイプの種類を選べと言われます。

#+BEGIN_EXAMPLE
Choose a number or apply filter (format: [groupId:]artifactId, case sensitive contains): 705: 
#+END_EXAMPLE

そのままエンターキーを押し、デフォルトの705(maven-archetype-quickstart)を選択します。

その他入力を求められますので以下のように入力します（デフォルト値）。

| 要素       | 入力例　     |
|------------+--------------|
| groupId    | com.example  |
| artifactId | hello        |
| version    | 1.0-SNAPSHOT |
| package    | com.example  |

** TODO pom.xmlを見てみよう

作成されたpom.xmlを眺めてみます。

#+begin_src sh
cd hello
more pom.xml
#+end_src

*** pom.xml

#+BEGIN_SRC xml
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.example</groupId>
  <artifactId>hello</artifactId>
  <version>1.0.0</version>
  <packaging>jar</packaging>

  <name>hello</name>
  <url>http://maven.apache.org</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.12</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
</project>
#+END_SRC


** TODO ビルドしてみよう

コマンドを実行して、成果物が作成されることを確認しましょう。

| コマンド    | target配下の成果物              | 説明　                     |
|-------------+---------------------------------+----------------------------|
| mvn compile | classes/                        | classファイル              |
| mvn test    | test-classes/,surefire-reports/ | classファイルとレポート    |
| mvn package | hello-1.0-SNAPSHOT.jar          | jarファイル                |
| mvn install | -                               | .m2/repositoryに配置される |
| mvn site    | site                            | レポート                   |
| mvn clean   | -                               | targetが削除される         |


** 暗黙の設定値を確認しよう

mavenのpom.xmlは多くのデフォルト設定値があります。
また、他のpom.xmlから値を引き継ぐこともできます。

今のpom.xmlがどういう状態であるか確認する場合、
以下のコマンドが頼りになります。


*** TODO 完全な設定値を出力する

settings.xmlやparentのpomを含めた設定値を出力します。

#+begin_src sh
mvn help:effective-pom
#+end_src

*** TODO 依存関係を出力する

#+begin_src sh
mvn dependency:tree
#+end_src

#+begin_example
[INFO] com.example:hello:jar:1.0-SNAPSHOT
[INFO] \- junit:junit:jar:3.8.1:test
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
#+end_example

** デフォルトのビルド設定を試してみよう。

| pom.xmlの要素         | 説明                                      |
|-----------------------+-------------------------------------------|
| <sourceDirectory>     | ソース置き場                              |
| <testSourceDirectory> | テストソース置き場                        |
| <outputDirectory>     | classファイル等の出力先ディレクトリ       |
| <testOutputDirectory> | テストclassファイル等の出力先ディレクトリ |
| <resources>           | リソース置き場                            |
| <testResources>       | テストリソース置き場                      |

*** TODO コンパイル設定

ソースを編集してみる。

com.example.App

#+begin_src java
    public static void main( String[] args )
    {
        System.out.println( "Hello Maven!" );
    }
#+end_src

テストを実行します。

#+begin_src bash
mvn test
#+end_src


*** TODO テストコンパイル設定

src/main配下のクラスで、junitのクラスを使ってみる。

#+begin_src java
    public static void main( String[] args )
    {
        junit.framework.TestCase.assertTrue(true);
        System.out.println( "Hello World!" );
    }
#+end_src

テストを実行します。

#+begin_src bash
mvn test
#+end_src

#+begin_example
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.1:compile (default-compile) on project hello: Compilation failure
[ERROR] /home/kawasaki/tmp/mvn_test/hello/src/main/java/com/example/App.java:[11,24] パッケージjunit.frameworkは存在しません
#+end_example

なぜコンパイルは失敗したのでしょうか？

*** TODO リソースの配置

hoge.txtを配置してコンパイルしてみよう。
hoge.txtはコピーされる？理由は？

**** src/main/java

#+begin_src sh
touch src/main/java/hoge.txt
mvn clean compile
ls target/classes
#+end_src

**** src/main/resources

#+begin_src sh
mv src/main/java/hoge.txt src/main/resources/
mvn clean compile
ls target/classes
#+end_src


** 設定を変更してみよう

*** TODO versionを変えてみる。

#+begin_src xml
  <groupId>com.example</groupId>
  <artifactId>hello</artifactId>
  <version>1.0.0</version>
#+end_src

#+begin_src sh
mvn clean package
ls target
#+end_src

*** TODO dependencyを変えてみる。

**** JUnit4.12にしてみる

http://search.maven.org/
で検索する。

http://search.maven.org/#artifactdetails|junit|junit|4.12|jar

#+begin_src xml
<dependency>
    <groupId>junit</groupId>
    <artifactId>junit</artifactId>
    <version>4.12</version>
</dependency>
#+end_src

依存関係はどう変化しましたか？

#+begin_src sh
mvn dependency:tree
#+end_src

#+begin_example
[INFO] com.example:hello:jar:1.0.0
[INFO] \- junit:junit:jar:4.12:test
[INFO]    \- org.hamcrest:hamcrest-core:jar:1.3:test
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
#+end_example

org.hamcrest:hamcrest-coreというライブラリは、なぜ現れたのでしょうか？



**** TODO 好きなライブラリを足してみよう

#+begin_src xml
<dependency>
  <groupId>org.springframework.boot</groupId>
  <artifactId>spring-boot-starter-web</artifactId>
  <version>1.3.2.RELEASE</version>
</dependency>
#+end_src

依存関係はどう変化しましたか？

#+begin_src sh
mvn dependency:tree
#+end_src

** TODO helpを表示してみよう

#+BEGIN_SRC sh
mvn -h
#+END_SRC

*** 出力結果（抜粋）

#+BEGIN_EXAMPLE
usage: mvn [options] [<goal(s)>] [<phase(s)>]

Options:
 -D,--define <arg>                      Define a system property
 -f,--file <arg>                        Force the use of an alternate POM
                                        file (or directory with pom.xml).
 -h,--help                              Display help information
 -o,--offline                           Work offline
 -P,--activate-profiles <arg>           Comma-delimited list of profiles
                                        to activate
 -s,--settings <arg>                    Alternate path for the user
                                        settings file
 -U,--update-snapshots                  Forces a check for missing
                                        releases and updated snapshots on
                                        remote repositories
 -v,--version                           Display version information
 -X,--debug                             Produce execution debug output
#+END_EXAMPLE
