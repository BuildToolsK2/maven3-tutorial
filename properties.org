# -*- mode: org; coding: utf-8-unix -*-
#+SETUPFILE: ./conf.org

** プロパティ

pom.xml内で、
#+BEGIN_EXAMPLE
${プロパティ名}
#+END_EXAMPLE
のように記述することで、指定したプロパティの値が展開されます。

** Mavenプロジェクトプロパティ

Mavenがデフォルトで用意しているプロパティがあります。

| プロパティ名                      | デフォルト値        |
|-----------------------------------+---------------------|
| project.build.directory           | target              |
| project.build.outputDirectory     | target/classes      |
| project.build.testOutputDirectory | target/test-classes |
| project.compileSourceRoots        | src/main/java       |
| project.testCompileSourceRoots    | src/test/java       |

*** TODO プロパティにどんな値が設定されているか表示してみよう。

#+BEGIN_SRC sh
# pom.xmlの内容を確認する
cd example/maven_props
less pom.xml

# 実行してプロパティを表示する。
mvn antrun:run
#+END_SRC


*** TODO その他のプロパティを表示してみよう

以下のプロパティを表示して、どのような値が設定されているか見てみよう。

- project.basedir
- project.name
- project.version
- project.build.finalName
- project.artifactId


** 環境変数

env.<環境変数名>で任意の環境変数を取得できます。

例：JAVA_HOMEの場合

#+BEGIN_EXAMPLE
env.JAVA_HOME
#+END_EXAMPLE

*** TODO 環境変数PATHを表示させてみよう

#+BEGIN_SRC sh
# pom.xmlを編集する
vi pom.xml
# 実行してプロパティを表示する。
mvn antrun:run
#+END_SRC


** TODO ユーザ定義プロパティ

<properties>内に、以下のように記載することで、　任意のプロパティを設定できます。

#+BEGIN_SRC xml
<プロパティ名>プロパティ値</プロパティ名>
#+END_SRC

#+BEGIN_SRC xml
<project>
  :
  <properties>
    <my.prop>MY PROPERTY</my.prop>
  </properties>
  :
</project>
#+END_SRC

*** 使用例

**** ライブラリのバージョン番号

#+BEGIN_SRC xml
<dependency> 
  <groupId>junit</groupId>
  <artifactId>junit</artifactId>
  <version>${junit.version}</version>
</dependecy>
#+END_SRC

**** ファイルパス

#+BEGIN_SRC xml
<properties>
  <hoge.home>path/to/hoge</hoge.home>
</properties>
#+END_SRC

*** TODO 自分で設定したプロパティを表示してみよう 

#+BEGIN_SRC xml
   <echo message="my.prop=${my.prop}"/>
#+END_SRC

#+BEGIN_SRC sh
# pom.xmlを編集する
vi pom.xml
# 実行してプロパティを表示する。
mvn antrun:run
#+END_SRC
