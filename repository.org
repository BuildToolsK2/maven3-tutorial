# -*- mode: org; coding: utf-8-unix -*-

#+SETUPFILE: ./conf.org

** この章のねらい

- 各リポジトリの関係を理解しよう！
- リポジトリ間の関係を理解しよう！

** リポジトリの種類

Mavenで「リポジトリ」という場合、大きく２つに分類されます。
- ローカルリポジトリ
- リモートリポジトリ



| 種類                                         | 説明                                                             | 主な用途                          |
|----------------------------------------------+------------------------------------------------------------------+-----------------------------------|
| ローカルリポジトリ                           | ローカルPC上にあるリポジトリ( ~/.m2/repository )                 | Mavenが直接参照する               |
| リモートリポジトリ（インハウスリポジトリ）　 | PJ内で構築したリポジトリ                                         | PJ成果物(jar等)をPJ向けに公開する |
| リモートリポジトリ（公開リポジトリ）         | インターネット上に公開されたリポジトリ(Maven Central, jcenter等) | ライブラリを公開する              |




#+BEGIN_SRC plantuml :file resources/repositories.png :cmdline -charset UTF-8


package "ローカルPC" <<Node>> {
  component "ローカルリポジトリ" as local
}
package "PJ共有マシン" <<Node>> {
  component "インハウスリポジトリ" as inhouse
}
package "インターネット" <<Node>> {
  component "公開リポジトリ" as remote
}

local ..> inhouse
inhouse ..> remote 

#+END_SRC

#+RESULTS:
[[file:resources/repositories.png]]


** ローカルリポジトリ

- ファイルシステム上のキャッシュ(~/.m2/repository)。
- mavenで使用するライブラリは必ずここにキャッシュされる。


#+BEGIN_SRC plantuml :file resources/retrieve-local-cache.png :cmdline -charset UTF-8
hide footbox

actor  "開発者" as dev
participant "mvn" as mvn
participant "ローカルリポジトリ" as local

dev -> mvn : mvn compile
mvn -> local : jar参照
dev <-- mvn : build success
#+END_SRC

#+RESULTS:
[[file:resources/retrieve-local-cache.png]]



** インハウスリポジトリ

*** PJのライブラリをデプロイ・取得する

インハウスリポジトリを仲介して、ライブラリの配布を行うことができます。

#+BEGIN_SRC plantuml :file resources/retrieve-pj-lib.png :cmdline -charset UTF-8
hide footbox

actor "PJライブラリ開発者" as lib_dev
participant mvn as mvn_lib_dev
participant "ローカル\nリポジトリ" as local_lib
participant "インハウス\nリポジトリ" as inhouse
participant "ローカル\nリポジトリ" as local_dev
participant mvn as mvn_dev
actor "開発者" as dev

lib_dev -> mvn_lib_dev : mvn deploy
mvn_lib_dev -> mvn_lib_dev :  mvn install
mvn_lib_dev -> local_lib :  jar配置
mvn_lib_dev -> inhouse : PUT pj-lib.jar
mvn_lib_dev <-- inhouse : 200 OK
lib_dev <-- mvn_lib_dev : Build Success

dev -> mvn_dev : mvn compile
mvn_dev -> local_dev : jar取得
mvn_dev <-- local_dev : なし
mvn_dev -> inhouse : GET pj-lib.jar
mvn_dev <-- inhouse : 200 OK
dev <-- mvn_dev : Build Success 

#+END_SRC

#+RESULTS:
[[file:resources/retrieve-pj-lib.png]]


*** リモートリポジトリのファイルを取得する

インハウスリポジトリは、リモートリポジトリへのプロキシ、キャッシュを兼ねることが多いです。

#+BEGIN_SRC plantuml :file resources/retrieve-remote.png :cmdline -charset UTF-8
hide footbox

actor "開発者" as dev
participant mvn 
participant "ローカルリポジトリ" as local
participant "インハウスリポジトリ" as inhouse
participant "リモートリポジトリ" as remote

dev -> mvn : mvn test
mvn -> local : jarを取得する
mvn <-- local : 存在しない
mvn -> inhouse : GET junit-3.8.1.jar
inhouse -> remote : GET junit-3.8.1.jar
inhouse <-- remote : ダウンロード
dev <-- inhouse : ダウンロード

#+END_SRC
#+RESULTS:
[[file:resources/retrieve-remote.png]]

インハウスリポジトリにキャッシュされている場合、リモートリポジトリへのアクセスは発生しません。

** リモートリポジトリ

デフォルトでは[[https://repo.maven.apache.org/maven2][Maven Central]]が有効なリモートリポジトリとして設定されている。


#+begin_src sh
mvn help:effective-pom
#+end_src

#+BEGIN_SRC xml
  <repositories>
    <repository>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
      <id>central</id>
      <name>Central Repository</name>
      <url>https://repo.maven.apache.org/maven2</url>
    </repository>
  </repositories>
#+END_SRC

** トラブルシューティング

*** 依存関係が解決できない場合

**** コマンドラインでupdateを指示する

-Uオプションを使用することでリモートリポジトリに取得しにいきます。

#+BEGIN_SRC sh
mvn -U compile
#+END_SRC

**** ローカルリポジトリからアーティファクト(jar)を削除する

ローカルリポジトリにjarがなければ、リモートリポジトリに取得しに行きます。

#+BEGIN_SRC sh
rm ~/.m2/repository/junit/junit/3.8.1/*
#+END_SRC

**** ローカルリポジトリに直接mvn installする

明示的にローカルリポジトリにインストールしてしまえば、
依存関係の問題はさしあたり発生しません。

#+BEGIN_SRC sh
mvn install:install-file -Dfile=<ファイル>
#+END_SRC


#+BEGIN_SRC 
# jarとpomをダウンロードする
wget https://repo.maven.apache.org/maven2/joda-time/joda-time/2.9.2/joda-time-2.9.2.jar
wget https://repo.maven.apache.org/maven2/joda-time/joda-time/2.9.2/joda-time-2.9.2.pom

# 手動でインストールする
mvn install:install-file -Dfile=joda-time-2.9.2.jar -DpomFile=joda-time-2.9.2.pom
#+END_SRC

